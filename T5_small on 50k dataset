{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12740842,"sourceType":"datasetVersion","datasetId":8053768}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"id":"e27727be","cell_type":"markdown","source":"# Import Required Libraries\nImport libraries such as pandas, torch, transformers, datasets, and matplotlib.","metadata":{}},{"id":"e8be5a4a-229c-40ca-a123-9d4d83e4bace","cell_type":"code","source":"!pip install evaluate\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:03.089269Z","iopub.execute_input":"2025-08-28T11:25:03.089518Z","iopub.status.idle":"2025-08-28T11:25:07.798199Z","shell.execute_reply.started":"2025-08-28T11:25:03.089502Z","shell.execute_reply":"2025-08-28T11:25:07.797462Z"}},"outputs":[{"name":"stdout","text":"Collecting evaluate\n  Downloading evaluate-0.4.5-py3-none-any.whl.metadata (9.5 kB)\nRequirement already satisfied: datasets>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from evaluate) (3.6.0)\nRequirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from evaluate) (1.26.4)\nRequirement already satisfied: dill in /usr/local/lib/python3.11/dist-packages (from evaluate) (0.3.8)\nRequirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from evaluate) (2.2.3)\nRequirement already satisfied: requests>=2.19.0 in /usr/local/lib/python3.11/dist-packages (from evaluate) (2.32.4)\nRequirement already satisfied: tqdm>=4.62.1 in /usr/local/lib/python3.11/dist-packages (from evaluate) (4.67.1)\nRequirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from evaluate) (3.5.0)\nRequirement already satisfied: multiprocess in /usr/local/lib/python3.11/dist-packages (from evaluate) (0.70.16)\nRequirement already satisfied: fsspec>=2021.05.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]>=2021.05.0->evaluate) (2025.5.1)\nRequirement already satisfied: huggingface-hub>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from evaluate) (0.33.1)\nRequirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from evaluate) (25.0)\nRequirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets>=2.0.0->evaluate) (3.18.0)\nRequirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.0.0->evaluate) (19.0.1)\nCollecting fsspec>=2021.05.0 (from fsspec[http]>=2021.05.0->evaluate)\n  Downloading fsspec-2025.3.0-py3-none-any.whl.metadata (11 kB)\nRequirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from datasets>=2.0.0->evaluate) (6.0.2)\nRequirement already satisfied: aiohttp!=4.0.0a0,!=4.0.0a1 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]>=2021.05.0->evaluate) (3.12.13)\nRequirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.7.0->evaluate) (4.14.0)\nRequirement already satisfied: hf-xet<2.0.0,>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.7.0->evaluate) (1.1.5)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->evaluate) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->evaluate) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->evaluate) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->evaluate) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->evaluate) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy>=1.17->evaluate) (2.4.1)\nRequirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->evaluate) (3.4.2)\nRequirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->evaluate) (3.10)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->evaluate) (2.5.0)\nRequirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19.0->evaluate) (2025.6.15)\nRequirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas->evaluate) (2.9.0.post0)\nRequirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->evaluate) (2025.2)\nRequirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->evaluate) (2025.2)\nRequirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (2.6.1)\nRequirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (1.3.2)\nRequirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (25.3.0)\nRequirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (1.7.0)\nRequirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (6.6.3)\nRequirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (0.3.2)\nRequirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp!=4.0.0a0,!=4.0.0a1->fsspec[http]>=2021.05.0->evaluate) (1.20.1)\nRequirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas->evaluate) (1.17.0)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->evaluate) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy>=1.17->evaluate) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy>=1.17->evaluate) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy>=1.17->evaluate) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy>=1.17->evaluate) (2024.2.0)\nDownloading evaluate-0.4.5-py3-none-any.whl (84 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m84.1/84.1 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hDownloading fsspec-2025.3.0-py3-none-any.whl (193 kB)\n\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m9.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n\u001b[?25hInstalling collected packages: fsspec, evaluate\n  Attempting uninstall: fsspec\n    Found existing installation: fsspec 2025.5.1\n    Uninstalling fsspec-2025.5.1:\n      Successfully uninstalled fsspec-2025.5.1\n\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\nbigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\ncesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cublas-cu12==12.4.5.8; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cublas-cu12 12.5.3.2 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cuda-cupti-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-cupti-cu12 12.5.82 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cuda-nvrtc-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-nvrtc-cu12 12.5.82 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cuda-runtime-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cuda-runtime-cu12 12.5.82 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cudnn-cu12==9.1.0.70; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cudnn-cu12 9.3.0.75 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cufft-cu12==11.2.1.3; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cufft-cu12 11.2.3.61 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-curand-cu12==10.3.5.147; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-curand-cu12 10.3.6.82 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cusolver-cu12==11.6.1.9; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusolver-cu12 11.6.3.83 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-cusparse-cu12==12.3.1.170; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-cusparse-cu12 12.5.1.3 which is incompatible.\ntorch 2.6.0+cu124 requires nvidia-nvjitlink-cu12==12.4.127; platform_system == \"Linux\" and platform_machine == \"x86_64\", but you have nvidia-nvjitlink-cu12 12.5.82 which is incompatible.\ngcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\nbigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\nbigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\n\u001b[0mSuccessfully installed evaluate-0.4.5 fsspec-2025.3.0\n","output_type":"stream"}],"execution_count":2},{"id":"a605228e","cell_type":"code","source":"# Import Required Libraries\nimport pandas as pd\nimport torch\nfrom transformers import T5Tokenizer, T5ForConditionalGeneration\nfrom torch.utils.data import DataLoader, Dataset\nfrom evaluate import load  # Updated importa\nimport matplotlib.pyplot as plt\nimport numpy as np","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:07.800079Z","iopub.execute_input":"2025-08-28T11:25:07.800336Z","iopub.status.idle":"2025-08-28T11:25:09.062464Z","shell.execute_reply.started":"2025-08-28T11:25:07.800314Z","shell.execute_reply":"2025-08-28T11:25:09.061888Z"}},"outputs":[],"execution_count":3},{"id":"32d6799b","cell_type":"markdown","source":"# Load and Preprocess Dataset\nLoad RecipeDB_Merged.csv, clean the data, and split it into training, validation, and test sets.","metadata":{}},{"id":"8cd89a85","cell_type":"code","source":"# Load and Preprocess Dataset\nfile_path = \"/kaggle/input/btp-monsoon-2025/RecipeDB_Merged.csv\"\ndata = pd.read_csv(file_path)\n\n# Clean and preprocess the data\ndata = data.dropna(subset=[\"ingredients\", \"Instructions\"])\ndata = data[[\"ingredients\", \"Instructions\"]]\n\n# Split the dataset into training, validation, and test sets\ntrain_size = int(0.8 * len(data))\nval_size = int(0.1 * len(data))\ntrain_data = data[:train_size]\nval_data = data[train_size:train_size + val_size]\ntest_data = data[train_size + val_size:]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:09.063194Z","iopub.execute_input":"2025-08-28T11:25:09.063726Z","iopub.status.idle":"2025-08-28T11:25:09.973957Z","shell.execute_reply.started":"2025-08-28T11:25:09.063705Z","shell.execute_reply":"2025-08-28T11:25:09.973361Z"}},"outputs":[],"execution_count":4},{"id":"5619c006","cell_type":"markdown","source":"# Setup GPU Configuration\nCheck GPU availability using torch.cuda and set device to GPU for training.","metadata":{}},{"id":"a32873c3","cell_type":"code","source":"# Setup GPU Configuration\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nprint(f\"Using device: {device}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:09.974703Z","iopub.execute_input":"2025-08-28T11:25:09.974923Z","iopub.status.idle":"2025-08-28T11:25:09.979420Z","shell.execute_reply.started":"2025-08-28T11:25:09.974906Z","shell.execute_reply":"2025-08-28T11:25:09.978847Z"}},"outputs":[{"name":"stdout","text":"Using device: cuda\n","output_type":"stream"}],"execution_count":5},{"id":"b014fc6b","cell_type":"code","source":"# Perform EDA\nimport seaborn as sns\n\n# Display the first few rows of the dataset\nprint(\"First 5 rows of the dataset:\")\nprint(data.head())\n\n# Check for missing values\nprint(\"\\nMissing values in the dataset:\")\nprint(data.isnull().sum())\n\n# Analyze the distribution of ingredients length\ndata[\"ingredients_length\"] = data[\"ingredients\"].apply(lambda x: len(x.split(\",\")))\nsns.histplot(data[\"ingredients_length\"], bins=30, kde=True)\nplt.title(\"Distribution of Ingredients Length\")\nplt.xlabel(\"Number of Ingredients\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Analyze the distribution of instructions length\ndata[\"instructions_length\"] = data[\"Instructions\"].apply(lambda x: len(x.split()))\nsns.histplot(data[\"instructions_length\"], bins=30, kde=True)\nplt.title(\"Distribution of Instructions Length\")\nplt.xlabel(\"Number of Words in Instructions\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Display basic statistics for ingredients and instructions length\nprint(\"\\nStatistics for Ingredients Length:\")\nprint(data[\"ingredients_length\"].describe())\n\nprint(\"\\nStatistics for Instructions Length:\")\nprint(data[\"instructions_length\"].describe())\n\n# Check for duplicate rows\nprint(\"\\nNumber of duplicate rows:\")\nprint(data.duplicated().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:09.981287Z","iopub.execute_input":"2025-08-28T11:25:09.981694Z","iopub.status.idle":"2025-08-28T11:25:11.821123Z","shell.execute_reply.started":"2025-08-28T11:25:09.981676Z","shell.execute_reply":"2025-08-28T11:25:11.820442Z"}},"outputs":[{"name":"stdout","text":"First 5 rows of the dataset:\n                                         ingredients  \\\n0  ['dungeness crab', 'turmeric', 'salt', 'mustar...   \n1  ['tomato', 'cumin', 'turmeric', 'salt', 'water...   \n2  ['vegetable oil', 'onion', 'tomato', 'green ch...   \n3  ['lamb shoulder', 'garam masala', 'salt', 'but...   \n4  ['potato', 'pea', 'vegetable oil', 'cumin seed...   \n\n                                        Instructions  \n0  rub the crabs with 1 teaspoon of the turmeric ...  \n1  bring the tomatoes , cumin , turmeric , salt ,...  \n2  heat 1 tablespoon oil in a skillet over medium...  \n3  season the lamb with garam masala and salt . h...  \n4  bring a medium saucepan of lightly salted wate...  \n\nMissing values in the dataset:\ningredients     0\nInstructions    0\ndtype: int64\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stderr","text":"/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\nStatistics for Ingredients Length:\ncount    51349.000000\nmean        10.065006\nstd          4.019401\nmin          2.000000\n25%          7.000000\n50%         10.000000\n75%         12.000000\nmax         37.000000\nName: ingredients_length, dtype: float64\n\nStatistics for Instructions Length:\ncount    51349.000000\nmean       127.471207\nstd         86.478461\nmin          2.000000\n25%         70.000000\n50%        109.000000\n75%        162.000000\nmax       2163.000000\nName: instructions_length, dtype: float64\n\nNumber of duplicate rows:\n111\n","output_type":"stream"}],"execution_count":6},{"id":"d9ffe09e","cell_type":"markdown","source":"# Define T5 Model and Tokenizer\nLoad the T5-small model and tokenizer from Hugging Face Transformers library.","metadata":{}},{"id":"3a674060","cell_type":"code","source":"# Define T5 Model and Tokenizer\nmodel_name = \"t5-small\"\ntokenizer = T5Tokenizer.from_pretrained(model_name)\nmodel = T5ForConditionalGeneration.from_pretrained(model_name).to(device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:11.821807Z","iopub.execute_input":"2025-08-28T11:25:11.822337Z","iopub.status.idle":"2025-08-28T11:25:15.749841Z","shell.execute_reply.started":"2025-08-28T11:25:11.822317Z","shell.execute_reply":"2025-08-28T11:25:15.749045Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/2.32k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"552f0a2dfa3a4981bf5dc5a6c3602384"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"11cf51af5a1a4ce7890609cb11594b96"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"tokenizer.json:   0%|          | 0.00/1.39M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"7ff9105c7bae40c196cbc8329e8fcc2a"}},"metadata":{}},{"name":"stderr","text":"You are using the default legacy behaviour of the <class 'transformers.models.t5.tokenization_t5.T5Tokenizer'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/1.21k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f9a76e6ba2d84b50bd0e56db409f490a"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"model.safetensors:   0%|          | 0.00/242M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"6ed1097a0e2b44389f2c62caf175d020"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"42fbd773eb6e472da1f13f95a10483c9"}},"metadata":{}}],"execution_count":7},{"id":"7be1d4fa","cell_type":"markdown","source":"# Prepare Dataset for Fine-Tuning\nTokenize the title and ingredients as input and instructions as target, and create PyTorch DataLoader objects.","metadata":{}},{"id":"760a7798","cell_type":"code","source":"# Prepare Dataset for Fine-Tuning\nclass RecipeDataset(Dataset):\n    def __init__(self, data, tokenizer, max_len=512):\n        self.data = data\n        self.tokenizer = tokenizer\n        self.max_len = max_len\n\n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        ingredients = self.data.iloc[idx][\"ingredients\"]\n        instructions = self.data.iloc[idx][\"Instructions\"]\n\n        input_text = f\"generate recipe: {ingredients}\"\n        target_text = instructions\n\n        inputs = self.tokenizer(\n            input_text, max_length=self.max_len, padding=\"max_length\", truncation=True, return_tensors=\"pt\"\n        )\n        targets = self.tokenizer(\n            target_text, max_length=self.max_len, padding=\"max_length\", truncation=True, return_tensors=\"pt\"\n        )\n\n        return {\n            \"input_ids\": inputs[\"input_ids\"].squeeze(),\n            \"attention_mask\": inputs[\"attention_mask\"].squeeze(),\n            \"labels\": targets[\"input_ids\"].squeeze(),\n        }\n\n# Create DataLoader objects\ntrain_dataset = RecipeDataset(train_data, tokenizer)\nval_dataset = RecipeDataset(val_data, tokenizer)\ntest_dataset = RecipeDataset(test_data, tokenizer)\n\ntrain_loader = DataLoader(train_dataset, batch_size=8, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=8)\ntest_loader = DataLoader(test_dataset, batch_size=8)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:15.750751Z","iopub.execute_input":"2025-08-28T11:25:15.751011Z","iopub.status.idle":"2025-08-28T11:25:15.759659Z","shell.execute_reply.started":"2025-08-28T11:25:15.750992Z","shell.execute_reply":"2025-08-28T11:25:15.758774Z"}},"outputs":[],"execution_count":8},{"id":"1b3cb1b4","cell_type":"markdown","source":"# Fine-Tune T5 Model\nImplement the training loop with gradient accumulation to handle memory limitations, and calculate training and validation loss.","metadata":{}},{"id":"2112968f","cell_type":"code","source":"# Fine-Tune T5 Model with Progress Tracking and Timing\nfrom tqdm import tqdm\nimport time\n\noptimizer = torch.optim.AdamW(model.parameters(), lr=5e-5)\nepochs = 6\ntrain_losses = []\nval_losses = []\n\nfor epoch in range(epochs):\n    print(f\"Epoch {epoch + 1}/{epochs}\")\n    start_time = time.time()\n    \n    model.train()\n    train_loss = 0\n    train_loader_tqdm = tqdm(train_loader, desc=\"Training\", leave=False)\n    \n    for batch in train_loader_tqdm:\n        optimizer.zero_grad()\n        input_ids = batch[\"input_ids\"].to(device)\n        attention_mask = batch[\"attention_mask\"].to(device)\n        labels = batch[\"labels\"].to(device)\n\n        outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n        loss = outputs.loss\n        loss.backward()\n        optimizer.step()\n\n        train_loss += loss.item()\n        train_loader_tqdm.set_postfix({\"Loss\": loss.item()})\n\n    train_losses.append(train_loss / len(train_loader))\n\n    model.eval()\n    val_loss = 0\n    val_loader_tqdm = tqdm(val_loader, desc=\"Validation\", leave=False)\n    \n    with torch.no_grad():\n        for batch in val_loader_tqdm:\n            input_ids = batch[\"input_ids\"].to(device)\n            attention_mask = batch[\"attention_mask\"].to(device)\n            labels = batch[\"labels\"].to(device)\n\n            outputs = model(input_ids=input_ids, attention_mask=attention_mask, labels=labels)\n            loss = outputs.loss\n\n            val_loss += loss.item()\n            val_loader_tqdm.set_postfix({\"Loss\": loss.item()})\n\n    val_losses.append(val_loss / len(val_loader))\n    end_time = time.time()\n    \n    print(f\"Epoch {epoch + 1} completed in {end_time - start_time:.2f} seconds.\")\n    print(f\"Train Loss = {train_losses[-1]:.4f}, Validation Loss = {val_losses[-1]:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T11:25:15.760740Z","iopub.execute_input":"2025-08-28T11:25:15.761045Z","iopub.status.idle":"2025-08-28T14:57:14.562563Z","shell.execute_reply.started":"2025-08-28T11:25:15.761019Z","shell.execute_reply":"2025-08-28T14:57:14.561938Z"}},"outputs":[{"name":"stdout","text":"Epoch 1/6\n","output_type":"stream"},{"name":"stderr","text":"Training:   0%|          | 0/5135 [00:00<?, ?it/s]Passing a tuple of `past_key_values` is deprecated and will be removed in Transformers v4.48.0. You should pass an instance of `EncoderDecoderCache` instead, e.g. `past_key_values=EncoderDecoderCache.from_legacy_cache(past_key_values)`.\n                                                                         \r","output_type":"stream"},{"name":"stdout","text":"Epoch 1 completed in 2122.41 seconds.\nTrain Loss = 1.0049, Validation Loss = 0.8253\nEpoch 2/6\n","output_type":"stream"},{"name":"stderr","text":"                                                                         \r","output_type":"stream"},{"name":"stdout","text":"Epoch 2 completed in 2119.93 seconds.\nTrain Loss = 0.8348, Validation Loss = 0.7744\nEpoch 3/6\n","output_type":"stream"},{"name":"stderr","text":"                                                                         \r","output_type":"stream"},{"name":"stdout","text":"Epoch 3 completed in 2119.52 seconds.\nTrain Loss = 0.7874, Validation Loss = 0.7449\nEpoch 4/6\n","output_type":"stream"},{"name":"stderr","text":"                                                                         \r","output_type":"stream"},{"name":"stdout","text":"Epoch 4 completed in 2118.61 seconds.\nTrain Loss = 0.7584, Validation Loss = 0.7251\nEpoch 5/6\n","output_type":"stream"},{"name":"stderr","text":"                                                                         \r","output_type":"stream"},{"name":"stdout","text":"Epoch 5 completed in 2118.70 seconds.\nTrain Loss = 0.7381, Validation Loss = 0.7118\nEpoch 6/6\n","output_type":"stream"},{"name":"stderr","text":"                                                                         ","output_type":"stream"},{"name":"stdout","text":"Epoch 6 completed in 2119.61 seconds.\nTrain Loss = 0.7225, Validation Loss = 0.6998\n","output_type":"stream"},{"name":"stderr","text":"\r","output_type":"stream"}],"execution_count":9},{"id":"27d02682","cell_type":"markdown","source":"# Evaluate Model Performance\nGenerate predictions on the test set and calculate BLEU and ROUGE scores.","metadata":{}},{"id":"fea69d6d-b84a-4666-baa1-ddf55ff9d959","cell_type":"code","source":"!pip install rouge_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T14:57:40.241794Z","iopub.execute_input":"2025-08-28T14:57:40.242279Z","iopub.status.idle":"2025-08-28T14:57:45.127589Z","shell.execute_reply.started":"2025-08-28T14:57:40.242256Z","shell.execute_reply":"2025-08-28T14:57:45.126875Z"}},"outputs":[{"name":"stdout","text":"Collecting rouge_score\n  Downloading rouge_score-0.1.2.tar.gz (17 kB)\n  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\nRequirement already satisfied: absl-py in /usr/local/lib/python3.11/dist-packages (from rouge_score) (1.4.0)\nRequirement already satisfied: nltk in /usr/local/lib/python3.11/dist-packages (from rouge_score) (3.9.1)\nRequirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from rouge_score) (1.26.4)\nRequirement already satisfied: six>=1.14.0 in /usr/local/lib/python3.11/dist-packages (from rouge_score) (1.17.0)\nRequirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk->rouge_score) (8.2.1)\nRequirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk->rouge_score) (1.5.1)\nRequirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk->rouge_score) (2024.11.6)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from nltk->rouge_score) (4.67.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.11/dist-packages (from numpy->rouge_score) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.11/dist-packages (from numpy->rouge_score) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.11/dist-packages (from numpy->rouge_score) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.11/dist-packages (from numpy->rouge_score) (2025.2.0)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.11/dist-packages (from numpy->rouge_score) (2022.2.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.11/dist-packages (from numpy->rouge_score) (2.4.1)\nRequirement already satisfied: intel-openmp<2026,>=2024 in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rouge_score) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.11/dist-packages (from mkl->numpy->rouge_score) (2022.2.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.11/dist-packages (from tbb==2022.*->mkl->numpy->rouge_score) (1.4.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.11/dist-packages (from mkl_umath->numpy->rouge_score) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.11/dist-packages (from intel-openmp<2026,>=2024->mkl->numpy->rouge_score) (2024.2.0)\nBuilding wheels for collected packages: rouge_score\n  Building wheel for rouge_score (setup.py) ... \u001b[?25l\u001b[?25hdone\n  Created wheel for rouge_score: filename=rouge_score-0.1.2-py3-none-any.whl size=24934 sha256=6199a796e260e91cd8404a50b578124f92aa4aab64d70c0db1d181009f3efbd4\n  Stored in directory: /root/.cache/pip/wheels/1e/19/43/8a442dc83660ca25e163e1bd1f89919284ab0d0c1475475148\nSuccessfully built rouge_score\nInstalling collected packages: rouge_score\nSuccessfully installed rouge_score-0.1.2\n","output_type":"stream"}],"execution_count":11},{"id":"e988cddb","cell_type":"code","source":"# Evaluate Model Performance\nbleu = load(\"bleu\")\nrouge = load(\"rouge\")\n\nmodel.eval()\npredictions = []\nreferences = []\n\nwith torch.no_grad():\n    for batch in test_loader:\n        input_ids = batch[\"input_ids\"].to(device)\n        attention_mask = batch[\"attention_mask\"].to(device)\n\n        outputs = model.generate(input_ids=input_ids, attention_mask=attention_mask, max_length=512)\n        decoded_preds = tokenizer.batch_decode(outputs, skip_special_tokens=True)\n        decoded_refs = tokenizer.batch_decode(batch[\"labels\"], skip_special_tokens=True)\n\n        predictions.extend(decoded_preds)\n        references.extend(decoded_refs)\n\n# Ignore empty lists and compute scores only if both lists are populated\nif predictions and references:\n    bleu_score = bleu.compute(predictions=predictions, references=[[ref] for ref in references])\n    rouge_score = rouge.compute(predictions=predictions, references=references)\n\n    print(f\"BLEU Score: {bleu_score}\")\n    print(f\"ROUGE Score: {rouge_score}\")\nelse:\n    print(\"Predictions or references are empty. Skipping BLEU and ROUGE score computation.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T14:57:46.160699Z","iopub.execute_input":"2025-08-28T14:57:46.161375Z","iopub.status.idle":"2025-08-28T15:14:49.326416Z","shell.execute_reply.started":"2025-08-28T14:57:46.161350Z","shell.execute_reply":"2025-08-28T15:14:49.325692Z"}},"outputs":[{"name":"stdout","text":"BLEU Score: {'bleu': 0.05818343393541471, 'precisions': [0.5316857792307299, 0.18339738263398422, 0.07830406654343808, 0.040315756957129044], 'brevity_penalty': 0.4392608737280324, 'length_ratio': 0.5486481373792291, 'translation_length': 313232, 'reference_length': 570916}\nROUGE Score: {'rouge1': 0.3161122783966871, 'rouge2': 0.09669885699975583, 'rougeL': 0.2204097734643043, 'rougeLsum': 0.2205512008318436}\n","output_type":"stream"}],"execution_count":12},{"id":"2b58336a","cell_type":"markdown","source":"# Plot Training and Validation Loss\nUse matplotlib to plot training and validation loss over epochs.","metadata":{}},{"id":"603e5edc","cell_type":"code","source":"# Plot Training and Validation Loss\nplt.figure(figsize=(10, 6))\nplt.plot(range(1, epochs + 1), train_losses, label=\"Training Loss\")\nplt.plot(range(1, epochs + 1), val_losses, label=\"Validation Loss\")\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.title(\"Training and Validation Loss\")\nplt.legend()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:14:49.327603Z","iopub.execute_input":"2025-08-28T15:14:49.327942Z","iopub.status.idle":"2025-08-28T15:14:49.511471Z","shell.execute_reply.started":"2025-08-28T15:14:49.327920Z","shell.execute_reply":"2025-08-28T15:14:49.510917Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1000x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":13},{"id":"f605d8e5","cell_type":"markdown","source":"# Calculate BLEU and ROUGE Scores\nEvaluate the model using BLEU and ROUGE metrics and display the results.","metadata":{}},{"id":"caded4dd","cell_type":"code","source":"# Display BLEU and ROUGE Scores\nprint(\"Final Evaluation Metrics:\")\nprint(f\"BLEU Score: {bleu_score}\")\nprint(f\"ROUGE Score: {rouge_score}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:14:49.512190Z","iopub.execute_input":"2025-08-28T15:14:49.512391Z","iopub.status.idle":"2025-08-28T15:14:49.516650Z","shell.execute_reply.started":"2025-08-28T15:14:49.512375Z","shell.execute_reply":"2025-08-28T15:14:49.515843Z"}},"outputs":[{"name":"stdout","text":"Final Evaluation Metrics:\nBLEU Score: {'bleu': 0.05818343393541471, 'precisions': [0.5316857792307299, 0.18339738263398422, 0.07830406654343808, 0.040315756957129044], 'brevity_penalty': 0.4392608737280324, 'length_ratio': 0.5486481373792291, 'translation_length': 313232, 'reference_length': 570916}\nROUGE Score: {'rouge1': 0.3161122783966871, 'rouge2': 0.09669885699975583, 'rougeL': 0.2204097734643043, 'rougeLsum': 0.2205512008318436}\n","output_type":"stream"}],"execution_count":14},{"id":"7d8e1650","cell_type":"code","source":"# Save the fine-tuned model and tokenizer\nmodel_save_path = \"/home/kanak22611/Kanak/Sem 7/BTP_Monsoon_7th/t5_finetuned_model\"\ntokenizer_save_path = \"/home/kanak22611/Kanak/Sem 7/BTP_Monsoon_7th/t5_finetuned_tokenizer\"\n\nmodel.save_pretrained(model_save_path)\ntokenizer.save_pretrained(tokenizer_save_path)\n\nprint(f\"Model saved to {model_save_path}\")\nprint(f\"Tokenizer saved to {tokenizer_save_path}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:14:49.518117Z","iopub.execute_input":"2025-08-28T15:14:49.518323Z","iopub.status.idle":"2025-08-28T15:14:50.085392Z","shell.execute_reply.started":"2025-08-28T15:14:49.518309Z","shell.execute_reply":"2025-08-28T15:14:50.084546Z"}},"outputs":[{"name":"stdout","text":"Model saved to /home/kanak22611/Kanak/Sem 7/BTP_Monsoon_7th/t5_finetuned_model\nTokenizer saved to /home/kanak22611/Kanak/Sem 7/BTP_Monsoon_7th/t5_finetuned_tokenizer\n","output_type":"stream"}],"execution_count":15},{"id":"1478148d","cell_type":"code","source":"from transformers import T5Tokenizer, T5ForConditionalGeneration\n\n# Load the saved model and tokenizer\nmodel_load_path = \"/home/kanak22611/Kanak/Sem 7/BTP_Monsoon_7th/t5_finetuned_model\"\ntokenizer_load_path = \"/home/kanak22611/Kanak/Sem 7/BTP_Monsoon_7th/t5_finetuned_tokenizer\"\n\nloaded_model = T5ForConditionalGeneration.from_pretrained(model_load_path).to(device)\nloaded_tokenizer = T5Tokenizer.from_pretrained(tokenizer_load_path)\n\nprint(\"Model and tokenizer loaded successfully!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:14:50.086257Z","iopub.execute_input":"2025-08-28T15:14:50.086810Z","iopub.status.idle":"2025-08-28T15:14:50.421200Z","shell.execute_reply.started":"2025-08-28T15:14:50.086783Z","shell.execute_reply":"2025-08-28T15:14:50.420549Z"}},"outputs":[{"name":"stdout","text":"Model and tokenizer loaded successfully!\n","output_type":"stream"}],"execution_count":16},{"id":"a4bab63a","cell_type":"code","source":"# Test the model with a sample input\nsample_ingredients = \"['tomato', 'cumin', 'turmeric', 'salt', 'water', 'vegetable oil']\"\ninput_text = f\"generate recipe: {sample_ingredients}\"\n\n# Tokenize the input\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\nprint(\"Generated Recipe Instructions:\")\nprint(generated_recipe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:14:50.421904Z","iopub.execute_input":"2025-08-28T15:14:50.422109Z","iopub.status.idle":"2025-08-28T15:14:50.768532Z","shell.execute_reply.started":"2025-08-28T15:14:50.422093Z","shell.execute_reply":"2025-08-28T15:14:50.767890Z"}},"outputs":[{"name":"stdout","text":"Generated Recipe Instructions:\ncombine all ingredients in a blender. blend until smooth. heat oil in a large skillet over medium heat. cook and stir until hot. serve hot.\n","output_type":"stream"}],"execution_count":17},{"id":"b8a0d108","cell_type":"code","source":"# Example 1: Simple Salad\nsample_title = \"Simple Salad\"\nsample_ingredients = \"['lettuce', 'tomato', 'cucumber', 'olive oil', 'lemon juice', 'salt', 'pepper']\"\ninput_text = f\"generate recipe: title: {sample_title}, ingredients: {sample_ingredients}\"\n\n# Tokenize the input\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\nprint(\"Generated Recipe Instructions for Simple Salad:\")\nprint(generated_recipe)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:42:20.326769Z","iopub.execute_input":"2025-08-28T15:42:20.327393Z","iopub.status.idle":"2025-08-28T15:42:20.779338Z","shell.execute_reply.started":"2025-08-28T15:42:20.327369Z","shell.execute_reply":"2025-08-28T15:42:20.778679Z"}},"outputs":[{"name":"stdout","text":"Generated Recipe Instructions for Simple Salad:\nplace the lettuce, tomatoes, cucumber, olive oil, lemon juice, salt and pepper in a large bowl. pour the dressing over the lettuce. cover and refrigerate for at least 2 hours.\n","output_type":"stream"}],"execution_count":18},{"id":"3ad950a3-2972-46d0-8329-0931e1c0da33","cell_type":"code","source":"# Example 2: Spaghetti Bolognese\nsample_title = \"Spaghetti Bolognese\"\nsample_ingredients = \"['spaghetti', 'ground beef', 'onion', 'garlic', 'tomato sauce', 'olive oil', 'salt', 'pepper']\"\ninput_text = f\"generate recipe: title: {sample_title}, ingredients: {sample_ingredients}\"\n\n# Tokenize the input\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\nprint(\"Generated Recipe Instructions for Spaghetti Bolognese:\")\nprint(generated_recipe)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:43:08.893440Z","iopub.execute_input":"2025-08-28T15:43:08.894080Z","iopub.status.idle":"2025-08-28T15:43:09.439208Z","shell.execute_reply.started":"2025-08-28T15:43:08.894059Z","shell.execute_reply":"2025-08-28T15:43:09.438380Z"}},"outputs":[{"name":"stdout","text":"Generated Recipe Instructions for Spaghetti Bolognese:\nin a large skillet, cook spaghetti according to package directions. drain. add beef, onion, garlic, tomato sauce, olive oil, salt and pepper. cook over medium heat until beef is tender. add spaghetti and cook until al dente.\n","output_type":"stream"}],"execution_count":22},{"id":"4d610c03-4955-43a1-9c98-0fe3df3297a8","cell_type":"code","source":"# Example 3: Pancakes\nsample_title = \"Pancakes\"\nsample_ingredients = \"['flour', 'milk', 'egg', 'sugar', 'baking powder', 'butter', 'salt']\"\ninput_text = f\"generate recipe: title: {sample_title}, ingredients: {sample_ingredients}\"\n\n# Tokenize the input\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\nprint(\"Generated Recipe Instructions for Pancakes:\")\nprint(generated_recipe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:42:35.369322Z","iopub.execute_input":"2025-08-28T15:42:35.369591Z","iopub.status.idle":"2025-08-28T15:42:35.964521Z","shell.execute_reply.started":"2025-08-28T15:42:35.369573Z","shell.execute_reply":"2025-08-28T15:42:35.963889Z"}},"outputs":[{"name":"stdout","text":"Generated Recipe Instructions for Pancakes:\npreheat oven to 350 degrees f. grease a 9x13 inch baking dish. combine flour, milk, eggs, sugar, baking powder, butter and salt in a bowl. mix well. place pan on a baking sheet. bake for 20 minutes.\n","output_type":"stream"}],"execution_count":19},{"id":"55346f43-4906-41e0-b419-9404247c10f9","cell_type":"code","source":"# Example 4: Vegetable Stir Fry\nsample_title = \"Vegetable Stir Fry\"\nsample_ingredients = \"['broccoli', 'carrot', 'bell pepper', 'soy sauce', 'ginger', 'garlic', 'sesame oil']\"\ninput_text = f\"generate recipe: title: {sample_title}, ingredients: {sample_ingredients}\"\n\n# Tokenize the input\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\nprint(\"Generated Recipe Instructions for Vegetable Stir Fry:\")\nprint(generated_recipe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:42:48.621394Z","iopub.execute_input":"2025-08-28T15:42:48.621695Z","iopub.status.idle":"2025-08-28T15:42:49.109556Z","shell.execute_reply.started":"2025-08-28T15:42:48.621676Z","shell.execute_reply":"2025-08-28T15:42:49.108751Z"}},"outputs":[{"name":"stdout","text":"Generated Recipe Instructions for Vegetable Stir Fry:\nin a large bowl, combine the broccoli, carrots, bell pepper, soy sauce, ginger, garlic, and sesame oil. stir well. cover and refrigerate for at least 1 hour.\n","output_type":"stream"}],"execution_count":20},{"id":"8dbef12c-5dcf-4041-bf22-ee1d13ff2e17","cell_type":"code","source":"\n\n# Example 5: Chocolate Cake\nsample_title = \"Chocolate Cake\"\nsample_ingredients = \"['flour', 'cocoa powder', 'sugar', 'eggs', 'milk', 'butter', 'baking powder', 'vanilla extract']\"\ninput_text = f\"generate recipe: title: {sample_title}, ingredients: {sample_ingredients}\"\n\n# Tokenize the input\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\nprint(\"Generated Recipe Instructions for Chocolate Cake:\")\nprint(generated_recipe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:42:52.025857Z","iopub.execute_input":"2025-08-28T15:42:52.026446Z","iopub.status.idle":"2025-08-28T15:42:52.702998Z","shell.execute_reply.started":"2025-08-28T15:42:52.026420Z","shell.execute_reply":"2025-08-28T15:42:52.702278Z"}},"outputs":[{"name":"stdout","text":"Generated Recipe Instructions for Chocolate Cake:\npreheat oven to 350 degrees f. in a large bowl, mix together the flour, cocoa powder, sugar, eggs, milk, butter, baking powder and vanilla extract. mix well. place the batter in a large bowl. pour the batter into the bowl. cover and bake for 30 minutes.\n","output_type":"stream"}],"execution_count":21},{"id":"1e814dd3-d5f9-49d8-b0d2-384ddfe9bbc2","cell_type":"code","source":"sample_title = input(\"Enter the recipe title: \")\nsample_ingredients = input(\"Enter the ingredients (comma-separated): \")\n\ninput_text = f\"generate recipe: title: {sample_title}, ingredients: [{sample_ingredients}]\"\ninputs = loaded_tokenizer(input_text, return_tensors=\"pt\").to(device)\n\n# Generate recipe instructions\noutputs = loaded_model.generate(inputs[\"input_ids\"], max_length=512)\ngenerated_recipe = loaded_tokenizer.decode(outputs[0], skip_special_tokens=True)\n\n# Display the generated recipe instructions\nprint(f\"\\nGenerated Recipe Instructions for {sample_title}:\")\nprint(generated_recipe)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-08-28T15:47:24.996381Z","iopub.execute_input":"2025-08-28T15:47:24.996989Z","iopub.status.idle":"2025-08-28T15:48:01.305723Z","shell.execute_reply.started":"2025-08-28T15:47:24.996967Z","shell.execute_reply":"2025-08-28T15:48:01.305002Z"}},"outputs":[{"output_type":"stream","name":"stdin","text":"Enter the recipe title:  chocolate cake\nEnter the ingredients (comma-separated):  coco powder, sugar, oil, eggs, baking powder\n"},{"name":"stdout","text":"\nGenerated Recipe Instructions for chocolate cake:\nmix together cocoa powder, sugar and oil in a bowl. add eggs and baking powder. mix well. place in a large bowl. mix together the ingredients together. pour into a large bowl. cover and refrigerate for at least 1 hour.\n","output_type":"stream"}],"execution_count":23},{"id":"03f9a303-42f5-4e76-aab3-4a002cddad0e","cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}